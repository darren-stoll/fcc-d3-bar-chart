const w = 800;
const h = 400;
const padding = 40;
const barWidth = w / 275

//Create tooltip that will show up when you hover over bar
var tooltip = d3.select("#svgcontainer")
                .append("div")
                .attr("id", "tooltip")
                .style('opacity',0);

//Create base SVG
const svg = d3.select("#svgcontainer")
              .append("svg")
              .attr("width", w + padding)
              .attr("height", h)

//Retrieve the dataset
d3.json('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json').then( (data) => {
  
  const dataset = data.data;
  
  //Convert time to various datas for representation
  const yearsDate = dataset.map((d) => {
    return new Date(d[0]);
  });
  
  const minYear = new Date(d3.min(yearsDate));
  const maxYear = new Date(d3.max(yearsDate));
  
  //Establish the scales for x and y
  const xScale = d3.scaleTime()
                .domain([minYear,maxYear])
                .range([padding,w + padding - 1]);
  
  const yScale = d3.scaleLinear()
                .domain([0,d3.max(dataset, (d) => (d[1]))])
                .range([h - padding, padding]);
  
  //Create axes and place them on SVG
  const xAxis = d3.axisBottom(xScale);
  
  svg.append("g")
      .attr("id", "x-axis")
      .attr("transform", "translate(0, " + (h - padding) + ")")
      .call(xAxis);
  
  const yAxis = d3.axisLeft(yScale);
  
  svg.append("g")
      .attr("id", "y-axis")
      .attr("transform", "translate(" + padding + ",0)")
      .call(yAxis);
  
  //Create a bar for each piece of data
  const scaledGDPArray = dataset.map((i) => {
    return yScale(i[1]);
  });
  
  svg.selectAll("rect")
      .data(dataset)
      .enter()
      .append("rect")
      .attr("fill","blue")
      .attr("class","bar")
      .attr("data-date", (d) => d[0])
      .attr("data-gdp", (d) => d[1])
      .attr("x", (d, i) => i * (barWidth) + padding)
      .attr("y", (d, i) => {
        return yScale(d[1]);
      })
      .attr("width", barWidth)
      .attr("height", (d, i) => {
        return h - yScale(d[1]) - padding;
      })
      //On mouseover, show GDP data
      .on('mouseover', function(d, i) {
          tooltip.transition()
            .duration(100)
            .style('opacity', 1.0);
          tooltip.html("<div>" + d[0] + "<br>$" + d[1] + " Billion</div>")
            .attr('data-date', data.data[i][0])
            .style('left', (i * barWidth) + 550 + 'px')
            .style('top', h - 100 + 'px')
            .style('transform', 'translateX(60px)');
        })
        .on('mouseout', function(d) {
          tooltip.transition()
            .duration(100)
            .style('opacity', 0);
        });
});